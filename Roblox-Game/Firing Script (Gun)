----------------------------------------------------------------------Variables---------------------------------------------------------------------

local gun = script.Parent.Parent
local list = gun:GetChildren()
local previousPart = nil
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local base = gun.Barrel
local _9mm = game.ServerStorage.Bullets["9mm Bullet"].Bullet
local fullMagazineReplacement = false --[[If you want the magazine to subtract an entire 
										  clip of ammo from your max ammo despite having
  										  remaining bulles in the magazine.]]
local frontFlash = gun.Flash["Front Flash"]
local rearFlash = gun.Flash["Rear Flash"]
local flashLight = gun.Flash["Flash Light"]
local secondFrontFlash = gun.Flash["Second Front Flash"]
local secondRearFlash = gun.Flash["Second Rear Flash"]
local humanoid = player.Character.Humanoid
local leftClickDown = false
local rightClickDown = false
local reloading = false
local debounce = true
local handle = gun.Handle
local flashing = false;

---------------------------------------------------------------------Information--------------------------------------------------------------------

local information = gun.Information
local fireCaliber = information["Bullet Caliber"]
local shotType = information["Shot Type"]
local weaponName = information["Weapon Name"]
local weaponType = information["Weapon Type"]
local fireType = information["Fire Type"]

-----------------------------------------------------------------------Sounds-----------------------------------------------------------------------

local fireSound = gun.Sounds["Fire Sound"]
local reloadSound = gun.Sounds["Reload Sound"]
local equipsound = nil
local emptySound = nil
local cockSound = nil

---------------------------------------------------------------------Animations---------------------------------------------------------------------

repeat
	wait()
until humanoid

--[[local animationFolder = gun:WaitForChild("Animations")
local idleAnimation = humanoid:LoadAnimation(animationFolder:WaitForChild("Idle Animation"))
local reloadAnimation = humanoid:LoadAnimation(animationFolder:WaitForChild("Reload Animation"))
local unequipAnimation = humanoid:LoadAnimation(animationFolder:WaitForChild("Unequip Animation"))
local standingAnimation = humanoid:LoadAnimation(animationFolder:WaitForChild("Standing Animation"))]]

----------------------------------------------------------------------Settings----------------------------------------------------------------------

local settings = gun.Settings
local ammo = settings.Ammo
local clipSize = settings["Clip Size"]
local fireRate = settings["Fire Rate"]
local reserveAmmo = settings["Reserve Ammo"]
local maxDammage = settings["Max Damage"]
local maxRange = settings["Max Range"]
local minDamage = settings["Min Damage"]
local reloadTime = settings["Reload Time"]
local bulletVelocity = settings["Bullet Velocity"]
local bulletDiscardTime = settings["Bullet Discard Time"]
local cockTime = settings["Cock Time"]

----------------------------------------------------------------------Constants---------------------------------------------------------------------

local meterToStudConstant = 2.85		  --[[Divide the average human hieght (1.75 meters) by 5 (Robloxian Hieght).]]		  
local gravitationalAcceleration = 168.2   --[[196.2(Roblox standar gravitiational acceleration) - 
											  2.85 x 9.81(earth gravitational accelration) = 168.2]]

--------------------------------------------------------------------Declarations--------------------------------------------------------------------

frontFlash.Transparency = 1
rearFlash.Transparency = 1
flashLight.Brightness = 10
flashLight.Enabled = false
secondFrontFlash.Transparency = 1
secondRearFlash.Transparency = 1
ammo.Value = clipSize.Value
--idleAnimation.Looped = true
--standingAnimation.Looped = true

-------------------------------------------------------------------Weld Function--------------------------------------------------------------------

list = gun:GetChildren()

for i = 1, #list do
	if (list[i].ClassName == "Part") or
	   (list[i].ClassName == "WedgePart") or
	   (list[i].ClassName == "CornerWedgePart") or
	   (list[i].ClassName == "UnionOperation") or
	   (list[i].ClassName == "BlockMesh") or
	   (list[i].ClassName == "CylinderMesh") or 
	   (list[i].ClassName == "SpecialMesh") then
		if (previousPart ~= nil) then
			local weld = Instance.new("Weld")
			weld.Part0 = previousPart
			weld.Part1 = list[i]
			weld.C0 = previousPart.CFrame:inverse()
			weld.C1 = list[i].CFrame:inverse()
			weld.Parent = previousPart
		end
		previousPart = list[i]
	end 
end

------------------------------------------------------------------Reloading Function-----------------------------------------------------------------

function reload()
	if (reserveAmmo.Value > 0) then
		if (not reloading) then
			if (ammo.Value ~= clipSize.Value) then
				rightClickDown = false					
				reloading = true
				--reloadAnimation:Play()
				reloadSound:Play()
				wait(reloadTime.Value)
				if (reserveAmmo.Value - clipSize.Value >= 0) then
					if (fullMagazineReplacement) then
						reserveAmmo.Value = reserveAmmo.Value - clipSize.Value
					else
						reserveAmmo.Value = reserveAmmo.Value - (clipSize.Value - ammo.Value)	
					end
					ammo.Value = clipSize.Value
				else
					if (ammo.Value + reserveAmmo.Value > clipSize.Value) then
						if (fullMagazineReplacement) then
							if (reserveAmmo.Value - clipSize.Value >= 0) then
								reserveAmmo.Value = reserveAmmo.Value - clipSize.Value
								ammo.Value = clipSize.Value	
							else
								ammo.Value = reserveAmmo.Value
								reserveAmmo.Value = 0
							end 	
						else
							reserveAmmo.Value = reserveAmmo.Value - (clipSize.Value - ammo.Value)
							ammo.Value = clipSize.Value	
						end
					else
						ammo.Value = ammo.Value + reserveAmmo.Value
						reserveAmmo.Value = 0
					end
				end
				reloading = false
			else
				print("Clip Full")
			end
			--reloadAnimation:Stop()
		end
	else
		print("No Ammo Left")
	end
end

-------------------------------------------------------------------Firing Functions------------------------------------------------------------------

local function createBullet(originalBullet, locationX, locationY, locationZ)
	local bullet = originalBullet:clone()
	bullet.Parent = workspace
	bullet.Anchored = false
	bullet.Position = Vector3.new(locationX, locationY, locationZ)
	return bullet
end

local function fireBulletOnce(bullet, bulletVelocity)--[=[Bullet Velocity should be in meters per second,
    								   		   		  calibre should be directly related to mass, velocity 
     												  and the drag coefficient. Damage can be related, but
     												  should be adjustable depending on the gun. The type
     												  of bullet and the spinning speed should be independent.
     												  The damage and velocity are dependent on the the spin.]=]
	local lookVector = base.CFrame.lookVector
	local basePosition = base.Position
	local newBullet = createBullet(bullet, 
					 			   basePosition.X, 
					 			   basePosition.Y, 
					 			   basePosition.Z)
	local BodyForce = Instance.new("BodyForce", newBullet)
	newBullet.BodyForce.force = Vector3.new(0, gravitationalAcceleration, 0) * newBullet:GetMass()
	newBullet.CanCollide = false
	newBullet.Orientation = base.Orientation
	newBullet.Velocity = Vector3.new(lookVector.X * bulletVelocity * meterToStudConstant,
						      		 lookVector.Y * bulletVelocity * meterToStudConstant, 
							  		 lookVector.Z * bulletVelocity * meterToStudConstant)

	newBullet.CanCollide = true
end

local function findObject(objectName, objectClass)
	local list = game.Workspace:GetChildren()
	local currentObject = nil
	local objectFound = nil
	for i = 1, #list do
		currentObject = list[i]
		if currentObject.ClassName == objectClass and currentObject.Name == objectName then
			objectFound = currentObject
		end 
	end
	return objectFound
end

local function getbulletHit(bullet, hit)
	bullet:Destroy()
	return hit.Name
end

local function getTravelDistance(bullet, hit)
	local distanceTravelled = (base.Position - hit.Position).magnitude / meterToStudConstant
	return distanceTravelled
end

local function getbulletDamage(distanceTravelled)
	local damage = 0;
	if distanceTravelled <= 10 then
		damage = 24
	elseif distanceTravelled <= 50 then
		damage = 0.215 * distanceTravelled + 26.15
	else
		damage = 15.4
	end
	return damage  
end

local function takesDamage(damage, hit)
	local humanoid
	if (hit.Parent) then
		humanoid = hit.Parent:findFirstChild("Humanoid")
	end
	if humanoid then
		humanoid.Health = humanoid.Health - damage
		return (humanoid.Health)
	end
end

local function getFinalVelocity(bullet)
	return (bullet.Velocity.magnitude / meterToStudConstant)
end

local function rapidFire(bullet, timesFired, fireRate, bulletVelocity)
	for i = 1, timesFired do
		fireBulletOnce(bullet, bulletVelocity)
		local bullet = findObject("Bullet", "UnionOperation")
		bullet.Touched:connect(function(hit)
			getFinalVelocity(bullet)
			getbulletHit(bullet, hit)
			local damage = getbulletDamage(getTravelDistance(bullet, hit))
			takesDamage(damage, hit)
		end)
		wait(60/(fireRate))
	end
end

local function Shoot(bullet, bulletVelocity)
	fireBulletOnce(bullet, bulletVelocity)
	ammo.Value = ammo.Value - 1	
	fireSound:Play()
	local bullet = findObject("Bullet", "UnionOperation")
	bullet.Touched:connect(function(hit)
		if hit.Name ~= "Barrel" then
			local damage = getbulletDamage(getTravelDistance(bullet, hit))
			takesDamage(damage, hit)
			bullet:Destroy()
		end
	end)
end

-------------------------------------------------------------------Flashing Function------------------------------------------------------------------

local function flash()
	if (not flashLight.Enabled) then
		frontFlash.Transparency = 0
		rearFlash.Transparency = 0
		flashLight.Enabled = true
		wait(60/(fireRate.Value)/2)	
		frontFlash.Transparency = 1
		rearFlash.Transparency = 1		
		secondFrontFlash.Transparency = 0
		secondRearFlash.Transparency = 0.25
		flashLight.Enabled = false
	end
	wait(60/(fireRate.Value)/2)
	secondFrontFlash.Transparency = 1
	secondRearFlash.Transparency = 1
end

-------------------------------------------------------------------Activate Function------------------------------------------------------------------

gun.Equipped:Connect(function()
	--standingAnimation:Stop()
	--idleAnimation:Play()
	mouse.Button1Up:Connect(function()
		leftClickDown = false
	end)
	
	gun.Activated:Connect(function()
		leftClickDown = true
		if (not reloading) then
			if (ammo.Value > 0) then
				repeat
					if (debounce) then
						debounce = false
						flash()
						Shoot(_9mm, bulletVelocity.Value)
						debounce = true
					else
						break;
					end	
				until (leftClickDown == false) or (ammo.Value <= 0)
			else
				print("Press R to reload")
			end 
		end
		mouse.keyDown:connect(function(key)
			if (key == "r") then
				reload()	
			end
		end)
	end)
end)

gun.Unequipped:Connect(function()
	--unequipAnimation:Play()
	leftClickDown = false
	--idleAnimation:Stop()
	wait(0.3)
	--unequipAnimation:Stop()
	--print(humanoid:GetPlayingAnimationTracks())
	--standingAnimation:Play()
end)
