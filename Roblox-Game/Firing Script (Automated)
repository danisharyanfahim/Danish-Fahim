local base = game.Workspace["Fire Thing"].Base
local _9mm = game.ServerStorage.Bullets["9mm Bullet"].Bullet
local meterToStudConstant = 2.85		  --[[Divide the average human hieght (1.75 meters) by 5 (Robloxian Hieght).]]		  
local gravitationalAcceleration = 168.2   --[[196.2(Roblox standar gravitiational acceleration) - 
											  2.85 x 9.81(earth gravitational accelration) = 168.2]]

local function createBullet(originalBullet, locationX, locationY, locationZ)
	local bullet = originalBullet:clone()
	bullet.Parent = workspace
	bullet.Anchored = false
	bullet.Position = Vector3.new(locationX, locationY, locationZ)
	return bullet
end

local function fireBullet(bullet, bulletVelocity)--[=[Bullet Velocity should be in meters per second,
    								   		   		  calibre should be directly related to mass, velocity 
     												  and the drag coefficient. Damage can be related, but
     												  should be adjustable depending on the gun. The type
     												  of bullet and the spinning speed should be independent.
     												  The damage and velocity are dependent on the the spin.]=]
	local lookVector = base.CFrame.lookVector
	local basePosition = base.Position
	local newBullet = createBullet(bullet, 
					 			   basePosition.X, 
					 			   basePosition.Y, 
					 			   basePosition.Z)
	local BodyForce = Instance.new("BodyForce", newBullet)
	newBullet.BodyForce.force = Vector3.new(0, gravitationalAcceleration, 0) * newBullet:GetMass()
	newBullet.CanCollide = false
	newBullet.Orientation = base.Orientation
	newBullet.Velocity = Vector3.new(lookVector.X * bulletVelocity * meterToStudConstant,
						      		 lookVector.Y * bulletVelocity * meterToStudConstant, 
							  		 lookVector.Z * bulletVelocity * meterToStudConstant)

	newBullet.CanCollide = true
end

local function findObject(objectName, objectClass)
	local list = game.Workspace:GetChildren()
	local temp = nil
	local temp2 = nil
	for i = 1, #list do
		temp = list[i]
		if temp.ClassName == objectClass and temp.Name == objectName then
			temp2 = temp
		end 
	end
	return temp2
end

local function getbulletHit(bullet, hit)
	bullet:Destroy()
	return hit.Name
end

local function getTravelDistance(bullet, hit)
	local distanceTravelled = (base.Position - hit.Position).magnitude / meterToStudConstant
	return distanceTravelled
end

local function getbulletDamage(distanceTravelled)
	local damage = 0;
	if distanceTravelled <= 10 then
		damage = 24
	elseif distanceTravelled <= 50 then
		damage = 0.215 * distanceTravelled + 26.15
	else
		damage = 15.4
	end
	return damage  
end

local function takesDamage(damage, hit)
	local humanoid = hit.Parent:findFirstChild("Humanoid")
	if humanoid then
		humanoid.Health = humanoid.Health - damage
		print (humanoid.Health)
	end
end

local function getFinalVelocity(bullet)
	return (bullet.Velocity.magnitude / meterToStudConstant)
end

local function rapidFire(bullet, timesFired, fireRate, bulletVelocity)
	for i = 1, timesFired do
		fireBullet(bullet, bulletVelocity)
		local bullet = findObject("Bullet", "UnionOperation")
		bullet.Touched:connect(function(hit)
			getFinalVelocity(bullet)
			getbulletHit(bullet, hit)
			local damage = getbulletDamage(getTravelDistance(bullet, hit))
			takesDamage(damage, hit)
		end)
		wait(60/(fireRate))
	end
end

--[[rapidFire(_9mm, 300, 600, 200)
print(time())]]

--[[findObject("Bullet", "UnionOperation").Touched:connect(function()
	print(findObject("Bullet", "UnionOperation").Velocity.magnitude)
	findObject("Bullet", "UnionOperation"):destroy()
end)]]



		--[[wait(1/((fireRate)/60)) --[[Period of fire rate f = 1/s  T = 1/f = 1 / 1 / s,
		 					  		thefore T = s. Where s is the seconds it takes to
							   		fire each bullet. This equation simplified is 60/fireRate]]
